<!--
    DIML XSD Schema for apiproduct v1.0.0
-->
<xs:schema xmlns="https://github.com/Region-Skane-SDI/diml/apiproduct" targetNamespace="https://github.com/Region-Skane-SDI/diml/apiproduct" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified">
  <xs:element name="apiProduct" type="ApiProductSpecification" />
  <xs:complexType name="ApiProductSpecification">
    <xs:annotation>
      <xs:documentation>A metadata representation of a service.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="apis" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:choice>
              <xs:element name="restApi" type="Apis.Rest.RestApi" />
              <xs:element name="soapApi" type="Apis.Soap.SoapApi" />
            </xs:choice>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="backends" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:choice>
              <xs:element name="restBackend" type="Backends.Rest.RestBackend" />
              <xs:element name="soapBackend" type="Backends.Soap.SoapBackend" />
            </xs:choice>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="channels" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="channel" type="Channels.Channel" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="dependencies" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="apiProduct" type="Core.ApiProductDependency" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="descriptions" type="Core.Descriptions.DescriptionCollection" minOccurs="0" maxOccurs="1" />
      <xs:element name="names" type="Core.Names.NameCollection" minOccurs="1" maxOccurs="1" />
      <xs:element name="traits" type="Traits.TraitCollection" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="dimlId" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A globally unique identifier for the API product.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uniqueName" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>A unique name for the API product across all API products in an environment. Must be less than 128 chars, only contain a-z, 0-9, '-', '_' chars and must start with a letter and cannot be empty.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Apis.Rest.RestApi">
    <xs:annotation>
      <xs:documentation>RestApi represents a RESTful API that can be used in API products.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="authorization" type="Core.Authorization.Authorization" minOccurs="0" maxOccurs="1" />
      <xs:element name="routes" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="route" type="Apis.Rest.Route" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="traits" type="Traits.TraitCollection" minOccurs="0" maxOccurs="1" />
      <xs:element name="transforms" type="Core.Transforms.Transforms" minOccurs="0" maxOccurs="1" />
      <xs:element name="validations" type="Core.Validations.Validations" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="backendId" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The identifier for the Backend for this API, must correspond to an existing backend id.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A unique identifier for the API within the API product.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="openapi" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Relative path to a open-api-file containing the specification for the api.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Apis.Soap.SoapApi">
    <xs:annotation>
      <xs:documentation>SoapApi represents a SOAP API that can be used in API products.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="authorization" type="Core.Authorization.Authorization" minOccurs="0" maxOccurs="1" />
      <xs:element name="operations" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="operation" type="Apis.Soap.Operation" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="traits" type="Traits.TraitCollection" minOccurs="0" maxOccurs="1" />
      <xs:element name="transforms" type="Core.Transforms.Transforms" minOccurs="0" maxOccurs="1" />
      <xs:element name="validations" type="Core.Validations.Validations" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="backendId" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The identifier for the Backend for this API, must correspond to an existing backend id.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A unique identifier for the API within the API product.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wsdl" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Relative path to a wsdl-file containing the contract for the operation.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Backends.Rest.RestBackend">
    <xs:annotation>
      <xs:documentation>RestBackend represents a REST backend service that can be used in API products.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A unique identifier for the Backend within the API product. Must be less than 128 chars, only contain a-z, 0-9, '-', '_' chars and must start with a letter and cannot be empty.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Backends.Soap.SoapBackend">
    <xs:annotation>
      <xs:documentation>SoapBackend represents a SOAP backend service that can be used in API products.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A unique identifier for the Backend within the API product. Must be less than 128 chars, only contain a-z, 0-9, '-', '_' chars and must start with a letter and cannot be empty.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Channels.Channel">
    <xs:annotation>
      <xs:documentation>Represents a logical messaging channel in the system. A channel defines how messages are produced, consumed, and configured, independent of the underlying messaging platform (such as RabbitMQ or Kafka).</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="bindings" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="binding" type="Channels.Binding" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:all>
    <xs:attribute name="asyncapi" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Relative path to the AsyncAPI specification file describing the message schema, operations, and metadata for this channel.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoDelete" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Indicates whether the channel should automatically be deleted when it is no longer in use.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durable" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Indicates whether the channel should persist its configuration and state across service restarts.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A unique identifier for this channel within the API product.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="Channels.ChannelType" use="required">
      <xs:annotation>
        <xs:documentation>Defines the type of messaging pattern or protocol used by this channel.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Core.ApiProductDependency">
    <xs:all>
      <xs:element name="apis" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="api" type="Core.ApiReference" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:all>
    <xs:attribute name="dimlId" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Unique identifier of the referenced API product.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Core.Descriptions.DescriptionCollection">
    <xs:annotation>
      <xs:documentation>A collection of descriptions of the object in different languages and formats.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="description" type="Core.Descriptions.Description" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Core.Names.NameCollection">
    <xs:annotation>
      <xs:documentation>A collection of names of the object in different languages.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="name" type="Core.Names.Name" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Traits.TraitCollection">
    <xs:annotation>
      <xs:documentation>A list of metadata properties.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="trait" type="Traits.Trait" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Core.Authorization.Authorization">
    <xs:annotation>
      <xs:documentation>Authorization contains policy-based authorization details.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="policy" type="Core.Authorization.PolicyAuthorization" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>
  <xs:complexType name="Apis.Rest.Route">
    <xs:annotation>
      <xs:documentation>Represents a logical messaging channel in the system. A channel defines how messages are produced, consumed, and configured, independent of the underlying messaging platform (such as RabbitMQ or Kafka).</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="authorization" type="Core.Authorization.Authorization" minOccurs="0" maxOccurs="1" />
      <xs:element name="match" type="Apis.Rest.RestApiMatch" minOccurs="1" maxOccurs="1" />
      <xs:element name="traits" type="Traits.TraitCollection" minOccurs="0" maxOccurs="1" />
      <xs:element name="transforms" type="Core.Transforms.Transforms" minOccurs="0" maxOccurs="1" />
      <xs:element name="validations" type="Core.Validations.Validations" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Unique identifier for the route within the API.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Core.Transforms.Transforms">
    <xs:annotation>
      <xs:documentation>Transforms contains request and response transforms for the API.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="request" type="Core.Transforms.RequestTransforms" minOccurs="0" maxOccurs="1" />
      <xs:element name="response" type="Core.Transforms.ResponseTransforms" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>
  <xs:complexType name="Core.Validations.Validations">
    <xs:annotation>
      <xs:documentation>Validations contains request and response validations for the API.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="request" type="Core.Validations.RequestValidations" minOccurs="0" maxOccurs="1" />
      <xs:element name="response" type="Core.Validations.ResponseValidations" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>
  <xs:complexType name="Apis.Soap.Operation">
    <xs:annotation>
      <xs:documentation>Operation represents a single operation in a SOAP API.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="authorization" type="Core.Authorization.Authorization" minOccurs="0" maxOccurs="1" />
      <xs:element name="traits" type="Traits.TraitCollection" minOccurs="0" maxOccurs="1" />
      <xs:element name="transforms" type="Core.Transforms.Transforms" minOccurs="0" maxOccurs="1" />
      <xs:element name="validations" type="Core.Validations.Validations" minOccurs="0" maxOccurs="1" />
    </xs:all>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Unique identifier for the operation.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="path" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The path that this operation matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="targetPath" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Optional in-line paths transform, which replaces the value in the Path attribute for the target path.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Channels.Binding">
    <xs:annotation>
      <xs:documentation>Represents a binding configuration that defines how messages are routed to a specific destination within a messaging channel.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="autoDelete" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Indicates whether the binding should automatically be removed when it is no longer in use.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="durable" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Indicates whether the binding should persist its configuration across service or broker restarts.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A unique identifier for this binding within the API product.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="routingKey" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The routing expression or key used to determine how messages are matched to this binding. The semantics depend on the underlying messaging platform.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="Channels.ChannelType">
    <xs:annotation>
      <xs:documentation>Enumerates the supported channel types.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="direct">
        <xs:annotation>
          <xs:documentation>A direct messaging pattern where messages are sent to a specific destination without additional routing.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Core.ApiReference">
    <xs:annotation>
      <xs:documentation>ApiReference represents a reference to an API in another API product.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The Api id in the referenced API product.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Core.Descriptions.Description">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:annotation>
          <xs:documentation>Used to give a DIML object a description in a given language and format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="language" type="Core.Language" use="required">
          <xs:annotation>
            <xs:documentation>The language of the description.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="type" type="Core.Descriptions.DescriptionType" use="required">
          <xs:annotation>
            <xs:documentation>The format of the description.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Core.Names.Name">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:annotation>
          <xs:documentation>Represents a name of a DIML object in a specific language.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="language" type="Core.Language" use="required">
          <xs:annotation>
            <xs:documentation>The language of the name.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Traits.Trait">
    <xs:annotation>
      <xs:documentation>A metadata property for a DIML object.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="Traits.TraitType" use="required">
      <xs:annotation>
        <xs:documentation>The type of trait.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>The value of the trait.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Core.Authorization.PolicyAuthorization">
    <xs:annotation>
      <xs:documentation>Authorization policy</xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="Core.Authorization.AuthorizationPolicy" use="optional">
      <xs:annotation>
        <xs:documentation>Authorization policy name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Apis.Rest.RestApiMatch">
    <xs:annotation>
      <xs:documentation>RestApiMatch defines a match for a REST API operation, including the path, HTTP methods, and optional headers.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="headers" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="header" type="Apis.Rest.HeaderMatch" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:all>
    <xs:attribute name="methods" type="Core.HttpMethods" use="required">
      <xs:annotation>
        <xs:documentation>HTTP defines a set of request methods to indicate the purpose of the request and what is expected if the request is successful. Although they can also be nouns, these request methods are sometimes referred to as HTTP verbs. Each request method has its own semantics, but some characteristics are shared across multiple methods, specifically request methods can be safe, idempotent, or cacheable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="path" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The REST API match path.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Core.Transforms.RequestTransforms">
    <xs:annotation>
      <xs:documentation>RequestTransforms represents a collection of transforms that can be applied to the request before it is sent to the API.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="headers" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="header" type="Core.Transforms.HeaderTransform" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="paths" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="path" type="Core.Transforms.PathTransform" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:all>
  </xs:complexType>
  <xs:complexType name="Core.Transforms.ResponseTransforms">
    <xs:annotation>
      <xs:documentation>ResponseTransforms contains response header transforms for the API. It is used to transform headers in responses before they are sent back to the client.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="headers" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="header" type="Core.Transforms.HeaderTransform" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:all>
  </xs:complexType>
  <xs:complexType name="Core.Validations.RequestValidations">
    <xs:annotation>
      <xs:documentation>RequestValidations contains request validations for the API. It is used to validate incoming requests before they are processed by the API.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="headers" type="Core.Validations.HeaderValidationCollection" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>
  <xs:complexType name="Core.Validations.ResponseValidations">
    <xs:all>
      <xs:element name="headers" type="Core.Validations.HeaderValidationCollection" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>
  <xs:simpleType name="Core.Language">
    <xs:restriction base="xs:string">
      <xs:enumeration value="en">
        <xs:annotation>
          <xs:documentation>English.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sv">
        <xs:annotation>
          <xs:documentation>Svenska.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Core.Descriptions.DescriptionType">
    <xs:annotation>
      <xs:documentation>The format of the description.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="logicMd">
        <xs:annotation>
          <xs:documentation>Logic markdown format.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="md">
        <xs:annotation>
          <xs:documentation>Markdown format.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="plain">
        <xs:annotation>
          <xs:documentation>Plain text format.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Traits.TraitType">
    <xs:annotation>
      <xs:documentation>The type of trait.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="classification.infoClass">
        <xs:annotation>
          <xs:documentation>Informationclass.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Core.Authorization.AuthorizationPolicy">
    <xs:annotation>
      <xs:documentation>Supported Authorization policy names</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="apiKey">
        <xs:annotation>
          <xs:documentation>API Key</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sithsFunctionCertificate">
        <xs:annotation>
          <xs:documentation>SITHS Function Certificate</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Apis.Rest.HeaderMatch">
    <xs:annotation>
      <xs:documentation>HeaderMatch represents a match condition for HTTP headers in a REST API.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="values" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="value" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:all>
    <xs:attribute name="isCaseSensitive" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Indicates whether the header match is case-sensitive. Defaults to false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="Apis.Rest.HeaderMatchMode" use="required">
      <xs:annotation>
        <xs:documentation>Specifies how the header match should be evaluated.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The name of the header to match against.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="Core.HttpMethods">
    <xs:annotation>
      <xs:documentation>HTTP defines a set of request methods to indicate the purpose of the request and what is expected if the request is successful. Although they can also be nouns, these request methods are sometimes referred to as HTTP verbs. Each request method has its own semantics, but some characteristics are shared across multiple methods, specifically request methods can be safe, idempotent, or cacheable.</xs:documentation>
    </xs:annotation>
    <xs:list>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="CONNECT">
            <xs:annotation>
              <xs:documentation>The CONNECT method establishes a tunnel to the server identified by the target resource.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="DELETE">
            <xs:annotation>
              <xs:documentation>The DELETE method deletes the specified resource.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="GET">
            <xs:annotation>
              <xs:documentation>The GET HTTP method requests a representation of the specified resource. Requests using GET should only be used to request data and shouldn't contain a body.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="HEAD">
            <xs:annotation>
              <xs:documentation>The HEAD method asks for a response identical to a GET request, but without a response body.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="OPTIONS">
            <xs:annotation>
              <xs:documentation>The OPTIONS method describes the communication options for the target resource.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="PATCH">
            <xs:annotation>
              <xs:documentation>The PATCH method applies partial modifications to a resource.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="POST">
            <xs:annotation>
              <xs:documentation>The POST method submits an entity to the specified resource, often causing a change in state or side effects on the server.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="PUT">
            <xs:annotation>
              <xs:documentation>The PUT method replaces all current representations of the target resource with the request content.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="TRACE">
            <xs:annotation>
              <xs:documentation>The TRACE method performs a message loop-back test along the path to the target resource.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:list>
  </xs:simpleType>
  <xs:complexType name="Core.Transforms.HeaderTransform">
    <xs:annotation>
      <xs:documentation>HeaderTransforms contains header transforms for the API. It is used to transform headers in requests and responses before they are processed by the API.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The name of the header to transform in requests or responses.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="operation" type="Core.Transforms.HeaderTransformOperation" use="required">
      <xs:annotation>
        <xs:documentation>Specifies the header transform operations.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="Core.Transforms.HeaderTransformOverwrite" use="optional">
      <xs:annotation>
        <xs:documentation>Specifies whether the header value should be overwritten or not.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Specifies the header value to transform.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Core.Transforms.PathTransform">
    <xs:attribute name="operation" type="Core.Transforms.PathTransformOperation" use="required">
      <xs:annotation>
        <xs:documentation>The type of path transform to apply.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="order" type="xs:int" use="optional">
      <xs:annotation>
        <xs:documentation>OBSOLETE: The order in which the transform is applied.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>A path starting with a '/'.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Core.Validations.HeaderValidationCollection">
    <xs:annotation>
      <xs:documentation>HeaderValidations contains header validations for the API. It is used to validate headers in requests and responses before they are processed by the API.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="header" type="Core.Validations.HeaderValidation" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="Apis.Rest.HeaderMatchMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="contains">
        <xs:annotation>
          <xs:documentation>Any of the headers with the given name must contain any of the match values.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="exactHeader">
        <xs:annotation>
          <xs:documentation>Any of the headers with the given name must match in its entirety.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="exists">
        <xs:annotation>
          <xs:documentation>The header must exist and contain any non-empty value. If there are multiple headers with the same name, the rule will also match.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="headerPrefix">
        <xs:annotation>
          <xs:documentation>Any of the headers with the given name must match by prefix.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="notContains">
        <xs:annotation>
          <xs:documentation>The header must exist and the value must be non-empty. None of the headers with the given name may contain any of the match values.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="notExists">
        <xs:annotation>
          <xs:documentation>The header must not exist.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Core.Transforms.HeaderTransformOperation">
    <xs:annotation>
      <xs:documentation>Specifies the header transform operations.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="remove">
        <xs:annotation>
          <xs:documentation>Remove the header from the request or response.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="set">
        <xs:annotation>
          <xs:documentation>Set the header to a specific value in the request or response.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Core.Transforms.HeaderTransformOverwrite">
    <xs:annotation>
      <xs:documentation>Specifies whether the header value should be overwritten or not.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="false">
        <xs:annotation>
          <xs:documentation>The header value should not be overwritten if it already exists.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="true">
        <xs:annotation>
          <xs:documentation>The header value should be overwritten if it already exists.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Core.Transforms.PathTransformOperation">
    <xs:restriction base="xs:string">
      <xs:enumeration value="addPrefix">
        <xs:annotation>
          <xs:documentation>Modifies the request path adding a prefix value.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="removePrefix">
        <xs:annotation>
          <xs:documentation>Modifies the request path removing a prefix value.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="set">
        <xs:annotation>
          <xs:documentation>Replaces the request path with the specified value.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="setWithPattern">
        <xs:annotation>
          <xs:documentation>Replaces the request path using a pattern template.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Core.Validations.HeaderValidation">
    <xs:annotation>
      <xs:documentation>HeaderValidation defines a validation for a specific header in requests or responses.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="log" type="Microsoft.Extensions.Logging.LogLevel" use="required">
      <xs:annotation>
        <xs:documentation>Specifies how validations should be logged</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The name of the header validation, either request or response.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="require" type="Core.Validations.HeaderValidationRequire" use="required">
      <xs:annotation>
        <xs:documentation>HeaderValidationRequire defines whether a header is required or optional in requests or responses.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="Microsoft.Extensions.Logging.LogLevel">
    <xs:restriction base="xs:string">
      <xs:enumeration value="critical" />
      <xs:enumeration value="debug" />
      <xs:enumeration value="error" />
      <xs:enumeration value="information" />
      <xs:enumeration value="none" />
      <xs:enumeration value="trace" />
      <xs:enumeration value="warning" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Core.Validations.HeaderValidationRequire">
    <xs:annotation>
      <xs:documentation>HeaderValidationRequire defines whether a header is required or optional in requests or responses.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="false">
        <xs:annotation>
          <xs:documentation>The header is optional in requests or responses.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="true">
        <xs:annotation>
          <xs:documentation>The header is required in requests or responses.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>